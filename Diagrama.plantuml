
@startuml

package Usuarios <<Frame>> #DDFF33
{

    RepositorioUsuario ->"*" Usuario
	class Usuario
	{
		+proponerPrenda(Usuario,GuardaRopa,Prenda): void
        +proponerQuitarPrenda(Usuario,GuardaRopa,Prenda): void

        +generarTodasSugerenciasPosibles(WeatherApiStrategy,int):List<Atuendo>
        +actualizarSugerenciaDelDia(List<Atuendo>): void

        -checkPropuesta(DeclaracionDePropuesta): boolean
        
        +aceptarPropuesta(DeclaracionDePropuesta): void
        +rechazarPropuesta(DeclaracionDePropuesta): void
        +revertirPropuesta(DeclaracionDePropuesta): void
        +recibirPropuesta(DeclaracionDePropuesta): void
	}
    class RepositorioUsuario << (S,#FF7700) Singleton >>
    {
        +addUsuario(Usuario): void
        +ActualizarSugerenciasDeUsuarios(WeatherApiStrategy,int): void
    }
}
package Propuestas <<Frame>> #FFBB22
{
    Propuesta-u[hidden]>Usuario
    Usuario-d[hidden]>Propuesta
    Usuario-d[hidden]>DeclaracionDePropuesta

    Usuario->"*"DeclaracionDePropuesta
    Usuario->"*"DeclaracionDePropuesta

    interface Propuesta
    {
        +aceptarPropuesta(GuardaRopa): void
        +revertirPropuesta(GuardaRopa): void
    }
    class AgregarPrenda implements Propuesta
    class RemoverPrenda implements Propuesta

    class DeclaracionDePropuesta
    {
        +aceptarPropuesta(): void
        +rechazarPropuesta(): void
        +revertirPropuesta(): void
    }
}
package Api <<Frame>> #DDDDDD
{
    AccuWeatherHandler ..l|>WeatherApiStrategy
    Interface WeatherApiStrategy
    {
        +getTemp(): float
        +getCondicionesClimaticas(): List<String>
    }
    class AccuWeatherHandler << (S,#FF7700) Singleton >>
    {
        +getTemp():float
        -fahrenheitToCelsius(): float
        +getCondicionesClimaticas(): List<String>
    }
}
package Prendas <<Frame>> #33DDFF
{
    Usuario->"*"GuardaRopa
    Usuario->"*"Atuendo
    AgregarPrenda->"*" Prenda
    RemoverPrenda->"*" Prenda
    DeclaracionDePropuesta -> GuardaRopa
    DeclaracionDePropuesta -> Propuesta


    package Atuendo <<Frame>> #DDDDDD
    {
        class Atuendo
        {
            -checkearPrendas(List<Prenda>)
            -chequearCantidadDePrenda(List<Prenda>)
        }
    }
        Atuendo->"*"Prenda
    
    package Material <<Frame>> #DDDDDD
    {
        Material -u>Trama
        Material -d->TipoDeMaterial
        class Material{}
        Enum TipoDeMaterial
        {
            ALGODON,
            LANA,
            SEDA
        }
        Enum Trama
        {
            CUADROS,
            LISO,
            RAYADO
        }
    }
    class Prenda
    {
        - temperaturaIdeal: Int
        + hayColorSecundario(): boolean
    }
    Prenda-u>Color
    Prenda-u>Color
    Prenda->Material
    Prenda->TipoDePrenda
    class PrendaBuilder
    {
        - temperaturaIdeal: Int
        - climasApropiados : List<String>
        + build(): Prenda
    }
    PrendaBuilder -[dashed]->Prenda
    PrendaBuilder-r>Color
    PrendaBuilder-r>Color
    PrendaBuilder->Material
    PrendaBuilder-l>TipoDePrenda
    class GuardaRopa
    {
        +generate(int,int):List<Int[]>
        +getMultiplesPrendasDeLista(List<Prenda>,int[]):List<Prenda>
        +getPrendasATemperatura(List<Prenda>,int int): List<Prenda>
        +getPrendasParaClima(List<Prenda>,int int): List<Prenda>
        -helper(List<init[]>,int[],int,int): void
        +sugerencias(List<Prenda>): List<Atuendo>
        +sugerencias(List<Prenda>,int,int): List<Atuendo>
        +sugerencias(List<Prenda>,WeatherApiStrategy): List<Atuendo>
        +sugerencias(WeatherApiStrategy,int): List<Atuendo>
    }
    GuardaRopa..>Prenda
    GuardaRopa..>Atuendo

    Enum Color
    {
        AZUL,
        VERDE,
        AMARILLO,
        ROJO,
        MORADO,
        ROSA,
        NEGRO,
        BLANCO,
        CELSETE,
        NARANJA
    }
    Enum TipoDePrenda
    {
        PARTE_SUPERIOR,
        PARTE_INFERIOR,
        CALZADO,
        ACCESORIO
    }

}


@endrtuml
